<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int="http://www.springframework.org/schema/integration"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- This context file defines a WarehouseService implemented as a gateway. 
		All calls to the service are routed over RabbitMQ to appropriate remote instances 
		of distributed-warehouse-node. -->

	<!-- Set up the AmqpTemplate/RabbitTemplate: -->
	<rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"
		reply-timeout="10000" />

	<!-- Request that queues, exchanges and bindings be automatically declared 
		on the broker: -->
	<rabbit:admin connection-factory="rabbitConnectionFactory" />
	
	<!-- connect to the local broker using the default user name and password -->
	<bean id="rabbitConnectionFactory"
		class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
		<constructor-arg value="${gv.rabbit.host}" />
		<property name="username" value="${gv.rabbit.user}" />
		<property name="password" value="${gv.rabbit.password}" />
	</bean>

	<!-- Declare the exchange to which requests are sent. Each node will declare its own queue -->
	<rabbit:direct-exchange name="stockExchange" id="stockExchange" />
	
	<!-- 
	Declare the exchange to which remote nodes send stock alerts.
	A fanout exchange since other components might want to consume alerts also
	 -->
	<rabbit:fanout-exchange name="stockAlertsExchange">
		<rabbit:bindings>
			<rabbit:binding queue="core-stock-alerts"></rabbit:binding>
		</rabbit:bindings>
	</rabbit:fanout-exchange>
	
	<rabbit:queue name="core-stock-alerts"/>	
</beans>