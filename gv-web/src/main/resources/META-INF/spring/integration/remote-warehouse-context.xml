<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int="http://www.springframework.org/schema/integration"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- This context file defines a WarehouseService implemented as a gateway. 
		All calls to the service are routed over RabbitMQ to appropriate remote instances 
		of distributed-warehouse-node. -->

	<!-- Set up the AmqpTemplate/RabbitTemplate: -->
	<rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"
		reply-timeout="10000" />

	<!-- Request that queues, exchanges and bindings be automatically declared 
		on the broker: -->
	<rabbit:admin connection-factory="rabbitConnectionFactory" />

	<!-- connect to the local broker using the default user name and password -->
	<bean id="rabbitConnectionFactory"
		class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
		<constructor-arg value="${gv.rabbit.host}" />
		<property name="username" value="${gv.rabbit.user}" />
		<property name="password" value="${gv.rabbit.password}" />
	</bean>

	<!-- Declare the exchange to which requests are sent. Each node will declare its own queue -->
	<rabbit:direct-exchange name="stockExchange" id="stockExchange" />
	
	<!-- 
	Declare the exchange to which remote nodes send stock alerts.
	A fanout exchange since other components might want to consume alerts also
	 -->
	<rabbit:fanout-exchange name="stockAlertsExchange">
		<rabbit:bindings>
			<rabbit:binding queue="core-stock-alerts"></rabbit:binding>
		</rabbit:bindings>
	</rabbit:fanout-exchange>
	
	<rabbit:queue name="core-stock-alerts"/>


	<!-- declare the SI channels needed to wire things up -->
	<int:channel id="inbound-responses" />
	<int:channel id="outbound-requests" />

	<int:channel id="inbound-rabbit-responses" />
	<int:channel id="outbound-rabbit-requests" />
	<int:channel id="request-shipment-ack" />
	
	<int:channel id="inbound-stock-alerts"/>
	<int:channel id="stock-alerts">
 		<int:interceptors>
			<int:wire-tap channel="logger" />
		</int:interceptors>
	</int:channel>
	
	<int:logging-channel-adapter id="logger" level="DEBUG" />	
	
	 
 	<!-- Service gateway -->
	<int:gateway id="outboundGateway" service-interface="gv.warehouse.api.WarehouseService"
		default-request-channel="outbound-requests"
	>
		<!-- Set the method header -->
		<int:method name="setStock">
			<int:header name="GV_Method" value="set-stock"/>
		</int:method>
		
		<int:method name="updateStock">
			<int:header name="GV_Method" value="update-stock"/>
		</int:method>
		
		<int:method name="getStock">
			<int:header name="GV_Method" value="get-stock"/>
		</int:method>
		
		<int:method name="requestShipment">
			<int:header name="GV_Method" value="request-shipment"/>
		</int:method>
		
		
		<!-- Implement the getName() method -->
		<int:method name="getName" request-channel="get-name" payload-expression="'null'"/>
		
	</int:gateway>
	
	<int:channel id="get-name"/>
	<int:service-activator input-channel="get-name" expression="'Remote Warehouse'"/>

	
	
	<!-- Outbound requests go through this chain to set headers and map to json -->
	<int:chain input-channel="outbound-requests" output-channel="outbound-rabbit-requests">
		<int:header-enricher>
			<int:header name="GV_WarehouseId" expression="'warehouse_' + payload.warehouseId"/>
		</int:header-enricher>
		<int:object-to-json-transformer />
	</int:chain>
	
	
	<!-- Declare the gateway to rabbit -->
	<int-amqp:outbound-gateway 
		amqp-template="amqpTemplate"
		exchange-name="stockExchange"
		request-channel="outbound-rabbit-requests"
		reply-channel="inbound-rabbit-responses"
		mapped-request-headers="GV*" routing-key-expression="headers.GV_WarehouseId"
	/>
	
	<int:header-value-router header-name="GV_Method" input-channel="inbound-rabbit-responses">
		<int:mapping value="request-shipment" channel="request-shipment-ack"/>	
		<int:mapping value="set-stock" channel="inbound-responses"/>	
		<int:mapping value="get-stock" channel="inbound-responses"/>	
		<int:mapping value="update-stock" channel="inbound-responses"/>	
	</int:header-value-router>	
	
	<int:json-to-object-transformer type="gv.stock.api.ShipmentConfirmation" input-channel="request-shipment-ack" output-channel="inbound-responses"/>
	
	<int:service-activator input-channel="inbound-responses" expression="payload"/>
	
	<!-- Channel adapter to receive stock alerts -->
	<int-amqp:inbound-channel-adapter
		acknowledge-mode="AUTO"
		channel="inbound-stock-alerts"
		connection-factory="rabbitConnectionFactory"
		queue-names="core-stock-alerts"
	/>
	
	<int:chain input-channel="inbound-stock-alerts">
		<int:json-to-object-transformer 
			type="gv.stock.api.StockAlert"
		/>
		<int:service-activator
			method="handleStockAlert"
			ref="distributeGVarehouseServiceImpl"
		/>
	</int:chain>
</beans>