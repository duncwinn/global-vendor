<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int="http://www.springframework.org/schema/integration"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- This context file defines a WarehouseService implemented as a gateway. 
		All calls to the service are routed over RabbitMQ to appropriate remote instances 
		of distributed-warehouse-node. -->

	<!-- Set up the AmqpTemplate/RabbitTemplate: -->
	<rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"
		reply-timeout="10000" />

	<!-- Request that queues, exchanges and bindings be automatically declared 
		on the broker: -->
	<rabbit:admin connection-factory="rabbitConnectionFactory" />

	<!-- connect to the local broker using the default user name and password -->
	<bean id="rabbitConnectionFactory"
		class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
		<constructor-arg value="${dw.rabbit.host}" />
		<property name="username" value="${dw.rabbit.user}" />
		<property name="password" value="${dw.rabbit.password}" />
	</bean>

	<!-- Declare the exchange. Each node will declare its own queue -->
	<rabbit:direct-exchange name="stockExchange" id="stockExchange" />


	<!-- declare the SI channels needed to wire things up -->
	<int:channel id="inbound-responses" />
	<int:channel id="outbound-requests" />

	<int:channel id="inbound-rabbit-responses" />
	<int:channel id="outbound-rabbit-requests" />
	<int:channel id="request-shipment-ack" />


	<int:channel id="get-name" />
	<int:channel id="get-name-reply" />

	<int:chain input-channel="get-name" output-channel="get-name-reply">
		<int:service-activator expression="'Remote Warehouse'" />
	</int:chain>


	<!-- Service gateway -->
	<int:gateway id="outboundGateway" service-interface="gv.warehouse.api.WarehouseService"
		default-request-channel="outbound-requests" default-reply-channel="inbound-responses">
		<!-- Set the method header -->
		<int:method name="setStock">
			<int:header name="DW_Method" value="set-stock" />
		</int:method>

		<int:method name="updateStock">
			<int:header name="DW_Method" value="update-stock" />
		</int:method>

		<int:method name="getStock">
			<int:header name="DW_Method" value="get-stock" />
		</int:method>

		<int:method name="requestShipment">
			<int:header name="DW_Method" value="request-shipment" />
		</int:method>

		<!-- Implement the getName() method -->
		<int:method name="getName" request-channel="get-name"
			reply-channel="get-name-reply" payload-expression="'null'" />

	</int:gateway>

	<!-- Outbound requests go through this chain to set headers and map to json -->
	<int:chain input-channel="outbound-requests" output-channel="outbound-rabbit-requests">
		<int:header-enricher>
			<int:header name="DW_WarehouseId" expression="'warehouse_' + payload.warehouseId" />
		</int:header-enricher>
		<int:object-to-json-transformer />
	</int:chain>


	<!-- Declare the gateway to rabbit -->
	<int-amqp:outbound-gateway amqp-template="amqpTemplate"
		exchange-name="stockExchange" request-channel="outbound-rabbit-requests"
		reply-channel="inbound-rabbit-responses" mapped-request-headers="DW*"
		routing-key-expression="headers.DW_WarehouseId" />

	<int:router input-channel="inbound-rabbit-responses"
		expression="headers.DW_Method == 'request-shipment' ? 'request-shipment-ack' : 'inbound-responses'" />

	<int:chain input-channel="request-shipment-ack"
		output-channel="inbound-responses">
		<int:json-to-object-transformer
			type="gv.warehouse.api.ShipmentConfirmation" />
	</int:chain>
</beans>