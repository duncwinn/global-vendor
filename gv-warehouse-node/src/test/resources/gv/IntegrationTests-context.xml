<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp-2.2.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.2.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
			
					
	<!-- 
		Set up a context for the message producer to allow end-to-end testing
	 -->	
	 
	 <!-- Import the node context first -->
	 <!-- 
	 Service context for a standalone warehouse node using an HSQL database
	 -->
	 <context:component-scan base-package="gv" />
	 
	 <context:property-placeholder location="classpath:test.properties" />

	 <import resource="classpath:META-INF/spring/integration/amqp-context.xml" />
	 <import resource="classpath:META-INF/spring/integration/rabbitmq-context.xml" />
	 <import resource="classpath:META-INF/spring/integration/warehouse-service-context.xml" />
 	 <import resource="classpath:META-INF/spring/integration/stock-alerts-context.xml" />
	 <import resource="classpath:META-INF/spring/data-context.xml" />
	 <import resource="classpath:META-INF/spring/service-context.xml" />	 
	 
	 <!-- Now set up the producer context -->
	 
	<!-- declare the SI channels needed to wire things up -->
	<int:channel id="inbound-responses"/>
	<int:channel id="outbound-requests"/>
	 
	<int:channel id="inbound-rabbit-responses"/>
	<int:channel id="outbound-rabbit-requests"/>
	<int:channel id="request-shipment-ack"/>
	 
 	<!-- Service gateway -->
	<int:gateway id="outboundGateway" service-interface="gv.warehouse.api.WarehouseService"
		default-request-channel="outbound-requests"
	>
		<!-- Set the method header -->
		<int:method name="setStock">
			<int:header name="GV_Method" value="set-stock"/>
		</int:method>
		
		<int:method name="updateStock">
			<int:header name="GV_Method" value="update-stock"/>
		</int:method>
		
		<int:method name="getStock">
			<int:header name="GV_Method" value="get-stock"/>
		</int:method>
		
		<int:method name="requestShipment">
			<int:header name="GV_Method" value="request-shipment"/>
		</int:method>
		
		
		<!-- Implement the getName() method -->
		<int:method name="getName" request-channel="get-name" payload-expression="'null'"/>
		
	</int:gateway>
	
	<int:channel id="get-name"/>
	<int:service-activator input-channel="get-name" expression="'Remote Warehouse'"/>

	
	
	<!-- Outbound requests go through this chain to set headers and map to json -->
	<int:chain input-channel="outbound-requests" output-channel="outbound-rabbit-requests">
		<int:header-enricher>
			<int:header name="GV_WarehouseName" expression="'warehouse_' + payload.warehouseName"/>
		</int:header-enricher>
		<int:object-to-json-transformer />
	</int:chain>
	
	
	<!-- Declare the gateway to rabbit -->
	<int-amqp:outbound-gateway 
		amqp-template="amqpTemplate"
		exchange-name="stockExchange"
		request-channel="outbound-rabbit-requests"
		reply-channel="inbound-rabbit-responses"
		mapped-request-headers="GV*" routing-key-expression="headers.GV_WarehouseName"
	/>
	
	<int:header-value-router header-name="GV_Method" input-channel="inbound-rabbit-responses">
		<int:mapping value="request-shipment" channel="request-shipment-ack"/>	
		<int:mapping value="set-stock" channel="inbound-responses"/>	
		<int:mapping value="get-stock" channel="inbound-responses"/>	
		<int:mapping value="update-stock" channel="inbound-responses"/>	
	</int:header-value-router>	
	
	<int:json-to-object-transformer type="gv.stock.api.ShipmentConfirmation" input-channel="request-shipment-ack" output-channel="inbound-responses"/>
	
	<int:service-activator input-channel="inbound-responses" expression="payload"/>
		
</beans>